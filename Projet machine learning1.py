# -*- coding: utf-8 -*-
"""Copie de CC_ESB_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m_2WxP-8IbHEiDw4n2xBxsRoqjr7z4MG

## The Dataset: Property prices in Tunisia
##Task: Price Prediction
"""

import os
import urllib.request

DATA_PATH = "dataset"
DOWNLOAD_URL = "https://raw.githubusercontent.com/AhmedCheikhRouhou/Datasets/main/proptun.csv"

def fetch_data(url=DOWNLOAD_URL, path=DATA_PATH):
    if not os.path.isdir(path):
        os.makedirs(path)
    urllib.request.urlretrieve(url , os.path.join(path, "data.csv"))

fetch_data()

"""**You can find your data in** `dataset/data.csv`

## Part 0: Imports
"""

import pandas as pd
from sklearn.model_selection import train_test_split
import numpy as np

"""## Part 1 (1 Points): Load and split the data with pandas"""

# Load data
def load_dataset_data(dataset=DATA_PATH):
   db=os.path.join(dataset,"data.csv")
   return pd.read_csv(db)

dataset = load_dataset_data()

# Split Data
train_set, test_set =train_test_split(dataset, test_size=0.2, random_state=42)

"""# Part 2 (4 Points): Data Analysis

Use the train set to perform the data analysis (you can add any other analysis)

1. Visualize the 5 first rows of the data
"""

dataset.head()

"""2. Show dataset information to see if there is any null values"""

dataset['category'].value_counts(ascending=True)

# Count the values in category column
dataset['city'].value_counts(ascending=True)

# Count the values in city column
dataset['city'].value_counts(ascending=True)

"""3. Show correlation between columns"""

print(dataset.corr())

"""4. Add a new column named `log_price` where you calculate the log10 (using numpy) of the price, then show correlations


"""

import numpy as np
dataset['log_price'] = np.log10(dataset['price'])

print(dataset.corr())

"""## Part 3: Data Cleaning (4 points)"""

from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
data_set_labels = dataset['log_price']
data_set_num= dataset.drop(["category","type","city","region","log_price"], axis=1)
# NumPipeline
num_pipeline = Pipeline([ 
 ('imputer', SimpleImputer(strategy="median")),
 ('std_scaler', StandardScaler() )])
num_attribs = list(data_set_num)
cat_attribs = ["category","type","city","region","log_price"]
ordinal=OneHotEncoder(sparse=False)
full_pipeline = ColumnTransformer([("num",num_pipeline,num_attribs),("cat",OneHotEncoder(),cat_attribs)])
dataset_prepared = full_pipeline.fit_transform(dataset)
print(dataset_prepared)

"""## Part 4: Model Training (4 points)

Use at least 2 models for regression and predict the log_price instead of the price:
- use cross validation for one of the models (1 pt)
- perform hyperparameter tuning in one of the models (1 pt)
"""

from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
reg=DecisionTreeRegressor().fit(dataset_prepared, data_set_labels)
#cross validation 
from sklearn.model_selection import cross_val_score
scores=cross_val_score(reg,dataset_prepared,data_set_labels,scoring="neg_root_mean_squared_error",cv=10)
print(scores)

"""## Part 5: Ensembling of the models (2 points)

Apply at least two model ensembling methods
"""

#linear regression
display_scores(scores)
lin = LinearRegression().fit(dataset_prepared, data_set_labels)
scores_labels=cross_val_score(lin,dataset_prepared,data_set_labels,scoring="neg_root_mean_squared_error",cv=10)
display_scores(scores_labels)


# hyperparameter tuning
from sklearn.metrics import mean_squared_error
lin_reg = LinearRegression()
lin_reg.fit(dataset_prepared, data_set_labels)
dataset_predictions = lin_reg.predict(dataset_prepared)
lin_mse = mean_squared_error(data_set_labels, dataset_predictions)
lin_rmse = np.sqrt(lin_mse)
lin_rmse

"""## Part 6: XGBoost (2 Points)

Use XGBoost with Cross Validation
"""

